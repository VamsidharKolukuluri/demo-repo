# -*- coding: utf-8 -*-
"""skip_list_implementation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KeHeDzKHOBwCwcZxS1QjIClUKwJjLaEp
"""

import random

class SkipList:
    class Node:
        def __init__(self, key, height, name, age, admission_year):
            self.key = key
            self.quantity = 1
            self.next = [None] * height
            self.name = name
            self.age = age
            self.admission_year = admission_year

    def __init__(self):
        self.head = self.Node(float("-inf"), 0, "None", None, None)
        self.tail = self.Node(float("inf"), 0, "None", None, None)
        self.num_nodes = 0
        self.head.next.append(self.tail)

    def randomize_height(self):
        height = 1
        while random.randint(0, 1) != 1:
            height += 1
            if height > 2:
                break
        return height

    def search_path(self, key):
        node = self.head
        path = [None] * len(self.head.next)
        for h in range(len(self.head.next) - 1, -1, -1):
            while node.next[h].key < key:
                node = node.next[h]
            path[h] = node
        return path

    def search(self, key):
        predecessor = self.search_path(key)
        target = predecessor[0].next[0]
        return target if target.key == key else None

    def __contains__(self, key):
        return self.search(key) is not None

    def insert(self, key, name, age, admission_year):
        predecessor = self.search_path(key)
        target = predecessor[0].next[0]
        self.num_nodes += 1

        if target.key == key:
            target.quantity += 1
            return

        height = self.randomize_height()
        new_node = self.Node(key, height, name, age, admission_year)

        for h in range(len(predecessor), height):
            self.head.next.append(self.tail)
            predecessor.append(self.head)

        for h in range(height):
            new_node.next[h] = predecessor[h].next[h]
            predecessor[h].next[h] = new_node

    def delete(self, key):
        predecessor = self.search_path(key)
        target = predecessor[0].next[0]

        if target.key != key:
            return

        self.num_nodes -= 1

        if target.quantity > 1:
            target.quantity -= 1
            return

        for h in range(len(target.next)):
            predecessor[h].next[h] = target.next[h]
            if predecessor[h] is self.head and predecessor[h].next[h] is self.tail:
                del self.head.next[max(1, h):]

    def __iter__(self):
        node = self.head.next[0]
        while len(node.next) > 0:
            yield node
            node = node.next[0]

    def __len__(self):
        return self.num_nodes

    def _repr_level(self, level):
        return " ".join([str(self.head.key)] + ["-" * len(str(x.key)) if level > len(x.next) - 1 else str(x.key) for x in self]
                        + [str(self.tail.key)])

    def __repr__(self):
        return "\n".join(self._repr_level(level) for level in range(len(self.head.next) - 1, -1, -1))


skip_list = SkipList()

# Insert some data
skip_list.insert(101, "John", 30, 2020)
skip_list.insert(230, "Alice", 25, 2019)
skip_list.insert(90, "Bob", 39, 2022)
skip_list.insert(150, "Eva", 31, 2018)
skip_list.insert(520, "Mike", 35, 2021)
skip_list.insert(240, "Liam", 33, 2021)

print("=> Initial Skip List <=")
print(skip_list)
print("\n")

print("+++ Insert 55 +++")
skip_list.insert(55, "Olivia", 22, 2022)
print(skip_list)
print("\n")

print("+++ Insert 101 +++")
if 101 in skip_list:
    print("### Duplicate ###")
else:
    print(skip_list)
print("\n")

print("-=o Search 150 o=-")
s = skip_list.search(150)
if s:
    print(f"Roll No.- {s.key}")
    print(f"Name- {s.name}")
    print(f"Age- {s.age}")
    print(f"Admission Year- {s.admission_year}")
else:
    print("Student not found")
print("\n")

print("-=o Search 56 o=-")
s = skip_list.search(56)
if s:
    print(f"Roll No.- {s.key}")
    print(f"Name- {s.name}")
    print(f"Age- {s.age}")
    print(f"Admission Year- {s.admission_year}")
else:
    print("Student not found")
print("\n")

print("--- Delete 50 ---")
skip_list.delete(50)
print(skip_list)
print("\n")

print("--- Delete 56 ---")
skip_list.delete(56)
s = skip_list.search(56)
if s:
    print(skip_list)
else:
    print("Student not found")

